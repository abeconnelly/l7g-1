#!/bin/bash

set -a

DEBUG=0
export MAKE_NEW_DIR=1

function _q {
  echo $1
  exit 1
}


#ref="hg19"
#reffa="/data-sdd/cwl_tiling/convert/ref/$ref.fa.gz"
#afn="/data-sdd/cwl_tiling/convert/ref/assembly.00.hg19.fw.gz"
#aidx="/data-sdd/cwl_tiling/convert/ref/assembly.00.hg19.fw.fwi"
#tagdir="/data-sdd/cwl_tiling/convert/ref/tagset.fa.gz"
#export l7g="/data-sdd/cwl_tiling/l7g/l7g-master/tools/l7g"
#pasta="/data-sdd/tiling/pasta/pasta"
#export refstream="/home/sarah/imputation/fileconversionGFF/refstream"

gffDir="$1"
gffPrefix="$2"

if [ "$gffDir" == "" ] ; then
  echo "provide inital directory"
  exit 1
fi

trap "ERROR: $gffDir $path ; exit" ERR


export ref1="$3"
export reffa1="$4"
export afn1="$5"
export aidx1="$6"

export refM="$7"
export reffaM="$8"
export afnM="$9"
export aidxM="${10}"
export seqidM="${11}"

export tagdir="${12}"
export l7g="${13}"
export pasta="${14}"
export refstream="${15}"
export tile_assembly="${16}"

export LD_LIBRARY_PATH='/usr/local/bin'

echo "individual variable listings"
echo "dir $gffDir"
echo "ref $ref1"
echo "reffa $reffa1"
echo "afn $afn1"
echo "aidx $aidx1"
echo "refM $refM"
echo "reffaM $reffaM"
echo "afnM  $afnM"
echo "aidxM $aidxM"
echo "seqidM $seqidM"
echo "tagdir $tagdir"
echo "pasta $pasta"
echo "refstream $refstream"
echo "l7g $l7g"
echo "tile_assembly $tile_assembly"

mkdir -p 'indexed'

#ifnInitial=`basename $gffInitial`
#export gff=$gffInitial

#ifn=`basename $gff`
#extensionfull=${ifn#*.}
#extensionfull='.'$extensionfull
#stripped_name=`basename $ifn $extensionfull`

#huid=`echo "$stripped_name" | cut -f1 -d'-'`
#dnaid=`echo "$stripped_name" | cut -f2- -d'-'`

#for chrom in chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 chr20 chr21 chr22 chrX chrY chrM ; do
for chrom in  chr19 ; do

   gffInitial=$gffDir'/filtered_'$gffPrefix.raw_variants.$chrom.gvcf.gz
   echo "$gffInitial"

   ifnInitial=`basename $gffInitial`
   echo "$ifnInitial"
 
   stripped_name=`basename $ifnInitial .gvcf.gz`

   echo "$stripped_name"

   if [[ "$MAKE_NEW_DIR" != 1 ]] ; then
     tabix -f $gffInitial
     gff=$gffInitial     
   else
#     mkdir -p cleaned 
     gunzip --to-stdout $gffInitial | bgzip > 'indexed/'$stripped_name'.gvcf.gz'
     gff='indexed/'$stripped_name'.gvcf.gz'
     tabix -f $gff
   fi

   echo "$gff"

# Change reference if alternative ref for ChrM
  if [ "$chrom" == "chrM" ] ; then
    echo "Using $refM ref for $chrom"
    export ref=$refM
    export reffa=$reffaM
    export afn=$afnM
    export aidx=$aidxM
    export refchrom=$seqidM
  else
    export ref=$ref1
    export reffa=$reffa1
    export afn=$afn1
    export aidx=$aidx1
    export refchrom=$chrom
  fi

  echo $stripped_name processing $chrom

  odir="stage/$gffPrefix"
  mkdir -p $odir

  while read line
  do

    path=`echo "$line" | cut -f1 | cut -f3 -d':'`

    echo "path $path"
    
    byte_start=`echo "$line" | cut -f3`
    byte_len=`echo "$line" | cut -f2`

    echo "  byte_start $byte_start"
    echo "  byte_len $byte_len"

    export ref_start0=`$l7g assembly-range $afn $path | tail -n1 | cut -f2`
    export ref_end0=`$l7g assembly-range $afn $path | tail -n1 | cut -f3`

    echo ">>>" "$l7g assembly-range $afn $path | tail -n1 | cut -f2"
    echo ">>>" "$l7g assembly-range $afn $path | tail -n1 | cut -f3"

    echo "  ref_start0 $ref_start0"
    echo "  ref_end0 $ref_end0"

    export ref_start1=`expr "$ref_start0" + 1`
    export ref_end1=`expr "$ref_end0" + 1`

    echo "  ref_start1 $ref_start1"
    echo "  ref_end1 $ref_end1"

    export realstart1=`tabix $gff $chrom:$ref_start1-$ref_end0 | head -n1 | cut -f2`
    export realend1=`tabix $gff $chrom:$ref_start1-$ref_end0 | tail -n1 | cut -f2`

    alt_end1=`tabix $gff $chrom:$ref_start1-$ref_end0 | grep END | tail -n1 | cut -f8 | cut -f2 -d'='`
    if [[ "$alt_end1" != "" ]] && [[ "$alt_end1" -ge "$realend1" ]] ; then
      realend1="$alt_end1"
    fi

    ## take the maximum of the 'END' field or the length of the reference sequence
    ## in the 'REF' column.
    ##
    alt_end1=`tabix $gff $chrom:$ref_start1-$ref_end0 | tail -n1 | cut -f4 | tr -d '\n' | wc -c`
    alt_start1=`tabix $gff $chrom:$ref_start1-$ref_end0 | tail -n1 | cut -f2 | tr -d '\n' `
    alt_end1=`expr $alt_start1 + $alt_end1 - 1`

    if [[ "$alt_end1" != "" ]] && [[ "$alt_end1" -ge "$realend1" ]] ; then
      realend1="$alt_end1"
    fi


    if [ "$realstart1" == "" ] ; then
      realstart1=$ref_start1
    fi

    if [ "$realend1" == "" ] ; then
      realend1=$ref_end0
    fi

    echo "cp1"
    echo "cp1 $path" 1>&2
    echo "  realend1 $realend1"
    echo "  realstart1 $realstart1"
    echo "  ref_end0 $ref_end0"
    echo "  ref_start0 $ref_start0"
    echo "  alt_end1 $alt_end1"

    export realdn=`expr "$realend1" - "$realstart1"`
    export dn=`expr "$ref_end0" - "$ref_start0"`

    export window_start1="$realstart1"
    if [ "$realstart1" -ge "$ref_start1" ]
    then
      export realstart1="$ref_start1"
      export window_start1="$ref_start1"
    fi

    echo "  window_start1 $window_start1"

    export window_start0=`expr "$window_start1" - 1` || true

    echo "cp2"
    echo "cp2 $path" 1>&2

    export window_end1="$realend1"
    #if [ "$ref_end1" -ge "$realend1" ]
    #then
    #  export realend1=$ref_end1
    #  export window_end1="$ref_end1"
    #fi

    export window_end0=`expr "$window_end1" - 1` || true

    ## if the window length is smaller that the size of the
    ## reference tilepath length, pad out the reference stream.
    ## We'll filter extra sequence outside of the window
    ## later.
    export ref_dn=`expr "$window_end1" "-" "$window_start1" "+" 1 `
    if [[ "$ref_dn" -lt "$dn" ]] ; then
      ref_dn="expr "$dn" "+" "1" "
    fi

    if [[ "$window_start1" -ge "$window_end1" ]] ; then
      echo "SKIPPING EMPTY TILEPATH $path (window: $window_start1-$window_end1)"
      continue
    fi

    ## I'm getting segfaults from what I think are truncated streams.  I think the issue
    ## is tabix for some reason prematurely terminating the stream.
    ## To try and mitigate this, write to a temporary file then delete afterwards
    ##
    tdir=`mktemp -d`

    echo "## TDIR: $tdir"
    echo "## REF_DN: $ref_dn (dn $dn)"

    #$refstream $reffa $refchrom:$window_start1-$window_end1 > $tdir/$path.ref
    $refstream $reffa "$refchrom:$window_start1+$ref_dn" > $tdir/$path.ref
    cat <( echo -e '\n\n\n' ) <( tabix $gff $chrom:$window_start1-$window_end1 ) > $tdir/$path.gvcf

    echo "$pasta -action gvcf-rotini -start $window_start0 -chrom $chrom \
      -refstream $tdir/$path.ref \
      -i $tdir/$path.gvcf | \
      $pasta -action filter-rotini -start $ref_start0 -n $dn > $odir/$path.pa"

    $pasta -action gvcf-rotini -start $window_start0 -chrom $chrom \
      -refstream $tdir/$path.ref \
      -i $tdir/$path.gvcf | \
      $pasta -action filter-rotini -start $ref_start0 -n $dn > $odir/$path.pa

    ## clean up gvcf and ref temporary files
    ##
    rm -rf $tdir

    echo "cp3"
    echo "cp3 $path" 1>&2

    echo "$pasta -action rotini-fastj -start $ref_start0 -tilepath $path -chrom $chrom -build $ref \
      -i $odir/$path.pa \
      -assembly <( $tile_assembly tilepath $afn $path ) \
      -tag <( cat <( samtools faidx $tagdir $path.00 | egrep -v '^>' | tr -d '\n' | fold -w 24 ) <(echo ) ) > $odir/$path.fj"

     $pasta -action rotini-fastj -start $ref_start0 -tilepath $path -chrom $chrom -build $ref \
      -i $odir/$path.pa \
      -assembly <( $tile_assembly tilepath $afn $path ) \
      -tag <( cat <( samtools faidx $tagdir $path.00 | egrep -v '^>' | tr -d '\n' | fold -w 24 ) <( echo )  ) > $odir/$path.fj

      #-assembly <( $l7g assembly $afn $path ) \

    echo "cp4"
    echo "cp4 $path" 1>&2

    #rm $odir/$path.pa
    bgzip -f $odir/$path.fj
    bgzip -r $odir/$path.fj.gz

  done < <( egrep '^'$ref':'$refchrom':' $aidx )

done # chrom
